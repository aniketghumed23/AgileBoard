{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  allLists: [],\n  loadingListService: true\n};\nconst listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loadingListService = action.payload;\n    },\n    successCreatingList: (state, action) => {\n      state.allLists.push(action.payload);\n    },\n    successFetchingLists: (state, action) => {\n      state.allLists = action.payload;\n    },\n    successDeletingList: (state, action) => {\n      state.allLists = state.allLists.filter(list => list._id !== action.payload);\n    },\n    deleteCard: (state, action) => {\n      const {\n        listId,\n        cardId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.filter(card => card._id !== cardId);\n        }\n\n        return list;\n      });\n    },\n    successCreatingCard: (state, action) => {\n      state.allLists = state.allLists.map(list => {\n        if (list._id === action.payload.listId) {\n          return action.payload.updatedList;\n        }\n\n        return list;\n      });\n    },\n    updateCardDragDrop: (state, action) => {\n      state.allLists = action.payload;\n    },\n    updateListDragDrop: (state, action) => {\n      state.allLists = action.payload;\n    },\n    setCardTitle: (state, action) => {\n      const {\n        listId,\n        cardId,\n        title\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) card.title = title;\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateListTitle: (state, action) => {\n      const {\n        listId,\n        title\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.title = title;\n        }\n\n        return list;\n      });\n    },\n    updateMemberOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        memberId,\n        memberName,\n        memberColor\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) card.members.unshift({\n              user: memberId,\n              name: memberName,\n              color: memberColor\n            });\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteMemberOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        memberId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) card.members = card.members.filter(member => member.user !== memberId);\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateDescriptionOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        description\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) card.description = description;\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateLabelSelectionOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        labelId,\n        selected\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.labels = card.labels.map(label => {\n                if (label._id === labelId) {\n                  label.selected = selected;\n                }\n\n                return label;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateLabelOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        labelId,\n        text,\n        color,\n        backColor\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.labels = card.labels.map(label => {\n                if (label._id === labelId) {\n                  label.text = text;\n                  label.color = color;\n                  label.backColor = backColor;\n                }\n\n                return label;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    createLabelForCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        _id,\n        text,\n        color,\n        backColor\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.labels.unshift({\n                _id,\n                text,\n                color,\n                backColor,\n                selected: true\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteLabelOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        labelId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.labels = card.labels.filter(label => label._id !== labelId);\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    createChecklistForCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        _id,\n        title\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists.push({\n                _id,\n                title,\n                items: []\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteChecklistOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        checklistId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.filter(l => l._id !== checklistId);\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    addChecklistItemForCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        checklistId,\n        _id,\n        text\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.map(list => {\n                if (list._id.toString() === checklistId.toString()) {\n                  list.items.push({\n                    _id: _id,\n                    text: text,\n                    completed: false\n                  });\n                }\n\n                return list;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    setChecklistItemCompletedOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        checklistId,\n        checklistItemId,\n        completed\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.map(list => {\n                if (list._id.toString() === checklistId.toString()) {\n                  list.items = list.items.map(item => {\n                    if (item._id === checklistItemId) {\n                      item.completed = completed;\n                    }\n\n                    return item;\n                  });\n                }\n\n                return list;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteChecklistItemOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        checklistId,\n        checklistItemId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.map(list => {\n                if (list._id.toString() === checklistId.toString()) {\n                  list.items = list.items.filter(item => item._id !== checklistItemId);\n                }\n\n                return list;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    setChecklistItemTextOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        checklistId,\n        checklistItemId,\n        text\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.checklists = card.checklists.map(list => {\n                if (list._id.toString() === checklistId.toString()) {\n                  list.items = list.items.map(item => {\n                    if (item._id === checklistItemId) {\n                      item.text = text;\n                    }\n\n                    return item;\n                  });\n                }\n\n                return list;\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateStartDueDatesOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        startDate,\n        dueDate,\n        dueTime\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.date.startDate = startDate;\n              card.date.dueDate = dueDate;\n              card.date.dueTime = dueTime;\n              if (dueDate === null) card.date.completed = false;\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateDateCompletedOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        completed\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.date.completed = completed;\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    addAttachmentForCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        link,\n        name,\n        _id,\n        date\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.attachments.push({\n                link: link,\n                name: name,\n                _id: _id,\n                date: date\n              });\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteAttachmentOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        attachmentId\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.attachments = card.attachments.filter(attachment => attachment._id !== attachmentId);\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    },\n    updateCoverOfCard: (state, action) => {\n      const {\n        listId,\n        cardId,\n        color,\n        isSizeOne\n      } = action.payload;\n      state.allLists = state.allLists.map(list => {\n        if (list._id === listId) {\n          list.cards = list.cards.map(card => {\n            if (card._id === cardId) {\n              card.cover.color = color;\n              card.cover.isSizeOne = isSizeOne;\n            }\n\n            return card;\n          });\n        }\n\n        return list;\n      });\n    }\n  }\n});\nexport const {\n  setLoading,\n  successCreatingList,\n  successFetchingLists,\n  successDeletingList,\n  deleteCard,\n  successCreatingCard,\n  updateCardDragDrop,\n  updateListDragDrop,\n  setCardTitle,\n  updateListTitle,\n  updateMemberOfCard,\n  deleteMemberOfCard,\n  updateDescriptionOfCard,\n  updateLabelSelectionOfCard,\n  updateLabelOfCard,\n  createLabelForCard,\n  deleteLabelOfCard,\n  createChecklistForCard,\n  deleteChecklistOfCard,\n  addChecklistItemForCard,\n  setChecklistItemCompletedOfCard,\n  deleteChecklistItemOfCard,\n  setChecklistItemTextOfCard,\n  updateStartDueDatesOfCard,\n  updateDateCompletedOfCard,\n  addAttachmentForCard,\n  deleteAttachmentOfCard,\n  updateCoverOfCard\n} = listSlice.actions;\nexport default listSlice.reducer;","map":{"version":3,"sources":["/Users/aniketghumed/Documents/personal_projects/SSDI_project/trello-clone-mern-master/client/src/Redux/Slices/listSlice.js"],"names":["createSlice","initialState","allLists","loadingListService","listSlice","name","reducers","setLoading","state","action","payload","successCreatingList","push","successFetchingLists","successDeletingList","filter","list","_id","deleteCard","listId","cardId","map","cards","card","successCreatingCard","updatedList","updateCardDragDrop","updateListDragDrop","setCardTitle","title","updateListTitle","updateMemberOfCard","memberId","memberName","memberColor","members","unshift","user","color","deleteMemberOfCard","member","updateDescriptionOfCard","description","updateLabelSelectionOfCard","labelId","selected","labels","label","updateLabelOfCard","text","backColor","createLabelForCard","deleteLabelOfCard","createChecklistForCard","checklists","items","deleteChecklistOfCard","checklistId","l","addChecklistItemForCard","toString","completed","setChecklistItemCompletedOfCard","checklistItemId","item","deleteChecklistItemOfCard","setChecklistItemTextOfCard","updateStartDueDatesOfCard","startDate","dueDate","dueTime","date","updateDateCompletedOfCard","addAttachmentForCard","link","attachments","deleteAttachmentOfCard","attachmentId","attachment","updateCoverOfCard","isSizeOne","cover","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n\tallLists: [],\n\tloadingListService: true,\n};\n\nconst listSlice = createSlice({\n\tname: 'list',\n\tinitialState,\n\treducers: {\n\t\tsetLoading: (state, action) => {\n\t\t\tstate.loadingListService = action.payload;\n\t\t},\n\t\tsuccessCreatingList: (state, action) => {\n\t\t\tstate.allLists.push(action.payload);\n\t\t},\n\t\tsuccessFetchingLists: (state, action) => {\n\t\t\tstate.allLists = action.payload;\n\t\t},\n\t\tsuccessDeletingList: (state, action) => {\n\t\t\tstate.allLists = state.allLists.filter((list) => list._id !== action.payload);\n\t\t},\n\t\tdeleteCard: (state,action)=> {\n\t\t\tconst {listId,cardId} = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif(list._id === listId){\n\t\t\t\t\tlist.cards = list.cards.filter(card=> card._id !== cardId);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tsuccessCreatingCard: (state, action) => {\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === action.payload.listId) {\n\t\t\t\t\treturn action.payload.updatedList;\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateCardDragDrop: (state, action) => {\n\t\t\tstate.allLists = action.payload;\n\t\t},\n\t\tupdateListDragDrop: (state, action) => {\n\t\t\tstate.allLists = action.payload;\n\t\t},\n\t\tsetCardTitle: (state, action) => {\n\t\t\tconst { listId, cardId, title } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) card.title = title;\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateListTitle: (state, action) => {\n\t\t\tconst { listId, title } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.title = title;\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateMemberOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, memberId, memberName, memberColor } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) card.members.unshift({ user: memberId, name: memberName, color:memberColor });\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tdeleteMemberOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, memberId } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId)\n\t\t\t\t\t\t\tcard.members = card.members.filter((member) => member.user !== memberId);\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateDescriptionOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, description } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) card.description = description;\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateLabelSelectionOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, labelId, selected } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.labels = card.labels.map((label) => {\n\t\t\t\t\t\t\t\tif (label._id === labelId) {\n\t\t\t\t\t\t\t\t\tlabel.selected = selected;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateLabelOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, labelId, text, color, backColor } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.labels = card.labels.map((label) => {\n\t\t\t\t\t\t\t\tif (label._id === labelId) {\n\t\t\t\t\t\t\t\t\tlabel.text = text;\n\t\t\t\t\t\t\t\t\tlabel.color = color;\n\t\t\t\t\t\t\t\t\tlabel.backColor = backColor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tcreateLabelForCard: (state, action) => {\n\t\t\tconst { listId, cardId, _id, text, color, backColor } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.labels.unshift({ _id, text, color, backColor, selected: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tdeleteLabelOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, labelId } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.labels = card.labels.filter((label) => label._id !== labelId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tcreateChecklistForCard: (state, action) => {\n\t\t\tconst { listId, cardId, _id, title } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists.push({ _id, title, items: [] });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tdeleteChecklistOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, checklistId } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists = card.checklists.filter((l) => l._id !== checklistId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\taddChecklistItemForCard: (state, action) => {\n\t\t\tconst { listId, cardId, checklistId, _id, text } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists = card.checklists.map((list) => {\n\t\t\t\t\t\t\t\tif (list._id.toString() === checklistId.toString()) {\n\t\t\t\t\t\t\t\t\tlist.items.push({ _id: _id, text: text, completed: false });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn list;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tsetChecklistItemCompletedOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, checklistId, checklistItemId, completed } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists = card.checklists.map((list) => {\n\t\t\t\t\t\t\t\tif (list._id.toString() === checklistId.toString()) {\n\t\t\t\t\t\t\t\t\tlist.items = list.items.map((item) => {\n\t\t\t\t\t\t\t\t\t\tif (item._id === checklistItemId) {\n\t\t\t\t\t\t\t\t\t\t\titem.completed = completed;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn list;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tdeleteChecklistItemOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, checklistId, checklistItemId } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists = card.checklists.map((list) => {\n\t\t\t\t\t\t\t\tif (list._id.toString() === checklistId.toString()) {\n\t\t\t\t\t\t\t\t\tlist.items = list.items.filter((item) => item._id !== checklistItemId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn list;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tsetChecklistItemTextOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, checklistId, checklistItemId, text } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.checklists = card.checklists.map((list) => {\n\t\t\t\t\t\t\t\tif (list._id.toString() === checklistId.toString()) {\n\t\t\t\t\t\t\t\t\tlist.items = list.items.map((item) => {\n\t\t\t\t\t\t\t\t\t\tif (item._id === checklistItemId) {\n\t\t\t\t\t\t\t\t\t\t\titem.text = text;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn list;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateStartDueDatesOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, startDate, dueDate, dueTime } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.date.startDate = startDate;\n\t\t\t\t\t\t\tcard.date.dueDate = dueDate;\n\t\t\t\t\t\t\tcard.date.dueTime = dueTime;\n\t\t\t\t\t\t\tif (dueDate === null) card.date.completed = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateDateCompletedOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, completed } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.date.completed = completed;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\taddAttachmentForCard: (state, action) => {\n\t\t\tconst { listId, cardId, link, name, _id,date } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.attachments.push({ link: link, name: name, _id:_id, date: date });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tdeleteAttachmentOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, attachmentId } = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.attachments = card.attachments.filter((attachment) => attachment._id !== attachmentId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t\tupdateCoverOfCard: (state, action) => {\n\t\t\tconst { listId, cardId, color, isSizeOne} = action.payload;\n\t\t\tstate.allLists = state.allLists.map((list) => {\n\t\t\t\tif (list._id === listId) {\n\t\t\t\t\tlist.cards = list.cards.map((card) => {\n\t\t\t\t\t\tif (card._id === cardId) {\n\t\t\t\t\t\t\tcard.cover.color = color;\n\t\t\t\t\t\t\tcard.cover.isSizeOne = isSizeOne;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn card;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t});\n\t\t},\n\t},\n});\n\nexport const {\n\tsetLoading,\n\tsuccessCreatingList,\n\tsuccessFetchingLists,\n\tsuccessDeletingList,\n\tdeleteCard,\n\tsuccessCreatingCard,\n\tupdateCardDragDrop,\n\tupdateListDragDrop,\n\tsetCardTitle,\n\tupdateListTitle,\n\tupdateMemberOfCard,\n\tdeleteMemberOfCard,\n\tupdateDescriptionOfCard,\n\tupdateLabelSelectionOfCard,\n\tupdateLabelOfCard,\n\tcreateLabelForCard,\n\tdeleteLabelOfCard,\n\tcreateChecklistForCard,\n\tdeleteChecklistOfCard,\n\taddChecklistItemForCard,\n\tsetChecklistItemCompletedOfCard,\n\tdeleteChecklistItemOfCard,\n\tsetChecklistItemTextOfCard,\n\tupdateStartDueDatesOfCard,\n\tupdateDateCompletedOfCard,\n\taddAttachmentForCard,\n\tdeleteAttachmentOfCard,\n\tupdateCoverOfCard,\n\n} = listSlice.actions;\n\nexport default listSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}